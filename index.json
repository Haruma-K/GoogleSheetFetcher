{
  "api/GoogleSheetFetcher.Editor.Fetcher.html": {
    "href": "api/GoogleSheetFetcher.Editor.Fetcher.html",
    "title": "Class Fetcher | Google Sheet Fetcher Documentation",
    "keywords": "Class Fetcher Inheritance Object Fetcher Namespace : GoogleSheetFetcher.Editor Assembly : GoogleSheetFetcher.Editor.dll Syntax public class Fetcher Properties | Improve this Doc View Source DidInitialize Declaration public bool DidInitialize { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source FetchSheetsAsync(String) Fetch the information of all the sheets contained in the spread sheet. Declaration public Task<IList<Sheet>> FetchSheetsAsync(string spreadsheetId) Parameters Type Name Description String spreadsheetId The spreadsheet id. Returns Type Description Task < IList < Sheet >> The list of the information of all the sheets. | Improve this Doc View Source FetchValuesAsync(String, Sheet) Fetch all the values contained in the sheet. Declaration public Task<IList<IList<object>>> FetchValuesAsync(string spreadsheetId, Sheet sheet = null) Parameters Type Name Description String spreadsheetId The spreadsheet id. Sheet sheet The Sheet instance obtained as the result of FetchSheetsAsync(String) . Returns Type Description Task < IList < IList < Object >>> The list of the rows. | Improve this Doc View Source FetchValuesAsync(String, String) Fetch all the values contained in the sheet. Declaration public Task<IList<IList<object>>> FetchValuesAsync(string spreadsheetId, string sheetName = null) Parameters Type Name Description String spreadsheetId The spreadsheet id. String sheetName The sheet name. Returns Type Description Task < IList < IList < Object >>> The list of the rows. | Improve this Doc View Source InitializeAsync(String, String, String, Nullable<CancellationToken>) Initialize the Fetcher . Declaration public Task InitializeAsync(string clientId, string clientSecret, string applicationId, CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description String clientId Google OAuth2 Client ID. String clientSecret Google OAuth2 Client Secret. String applicationId The identifier to use the for file to store the credentials. Nullable < CancellationToken > cancellationToken CancellationToken to cancel the initialization process. Returns Type Description Task"
  },
  "api/GoogleSheetFetcher.Editor.html": {
    "href": "api/GoogleSheetFetcher.Editor.html",
    "title": "Namespace GoogleSheetFetcher.Editor | Google Sheet Fetcher Documentation",
    "keywords": "Namespace GoogleSheetFetcher.Editor Classes Fetcher Sheet"
  },
  "api/GoogleSheetFetcher.Editor.Sheet.html": {
    "href": "api/GoogleSheetFetcher.Editor.Sheet.html",
    "title": "Class Sheet | Google Sheet Fetcher Documentation",
    "keywords": "Class Sheet Inheritance Object Sheet Namespace : GoogleSheetFetcher.Editor Assembly : GoogleSheetFetcher.Editor.dll Syntax public class Sheet Properties | Improve this Doc View Source Id The gid of the sheet. Declaration public string Id { get; } Property Value Type Description String | Improve this Doc View Source Name The sheet name. Declaration public string Name { get; } Property Value Type Description String"
  },
  "index.html": {
    "href": "index.html",
    "title": "GoogleSheetFetcher | Google Sheet Fetcher Documentation",
    "keywords": "GoogleSheetFetcher Overview The GoogleSheetFetcher is the simple interface Google Sheets reader for Unity editor. You can do OAuth2 authorization and fetch the spreadsheet values by writing the following. // Google OAuth2 authorization. var fetcher = new Fetcher(); await fetcher.InitializeAsync(_clientId, _clientSecret, _applicationId); // Get all the values in the sheet. var values = await fetcher.FetchValuesAsync(_spreadsheetId, sheets[0]); Usage Please refer to the manual for usage. License This library is under the MIT License . This software includes the work that is distributed in the Apache License 2.0 ."
  },
  "manual/license.html": {
    "href": "manual/license.html",
    "title": "Lisence | Google Sheet Fetcher Documentation",
    "keywords": "Lisence This library is under the MIT License . This software includes the work that is distributed in the Apache License 2.0 ."
  },
  "manual/usage.html": {
    "href": "manual/usage.html",
    "title": "Usage | Google Sheet Fetcher Documentation",
    "keywords": "Usage Install Unity2019.3.4 or later Add the dependency to your manifest.json as follows. { \"dependencies\": { \"com.harumak.googlesheetfetcher\": \"https://github.com/Haruma-K/GoogleSheetFetcher.git?path=/Packages/com.harumak.googlesheetfetcher\" } } Unity2019.3.3 or earlier Download ZIP Copy Packages/com.harumak.googlesheetfetcher to your project. Add the dependency to your manifest.json as follows. { \"dependencies\": { \"com.harumak.googlesheetfetcher\": \"file:com.harumak.googlesheetfetcher\" } } Create Google Client ID & Client Secret Create the project Go to Google Developer Console . If you don't have project, select Select a project > NEW PROJECT to create a project. On the next page, enter the project name and click on the CREATE button. Create OAuth consent screen Then select the project, and press OAuth consent screen from the menu on the left. Next, select the User Type according to the use, and click on the CREATE And enter the Application Name and press the SAVE button on the next page. Create Client ID & Client Secret Next, click on the Credentials from the menu on the left. And select CREATE CREDENTIALS > OAuth Client ID . Select Other for the application type, enter an Name and click on the Create button. Write a script Initialize First, instantiate and initialize the Fetcher. // Google OAuth2 authorization. var fetcher = new Fetcher(); await fetcher.InitializeAsync(_clientId, _clientSecret, _applicationId); Then, the OAuth2 authentication page by Google will be opened. When the user completes the authorization, the authorization information is saved. Fetch values of a sheet After the authorization, you can fetch the data from Spreadsheet. // Get all the values in the sheet. var values = await fetcher.FetchValuesAsync(_spreadsheetId, sheets[0]); For other APIs, refer to the API documentation of the Fetcher class ."
  }
}